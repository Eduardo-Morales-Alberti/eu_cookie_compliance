diff --git a/config/install/eu_cookie_compliance.settings.yml b/config/install/eu_cookie_compliance.settings.yml
index 5d80b16..95af639 100644
--- a/config/install/eu_cookie_compliance.settings.yml
+++ b/config/install/eu_cookie_compliance.settings.yml
@@ -47,3 +47,4 @@ method: 'default'
 disagree_button_label: 'No, thanks'
 disabled_javascripts: ''
 whitelisted_cookies: ''
+consent_storage_method: 'do_not_store'
diff --git a/config/schema/eu_cookie_compliance.schema.yml b/config/schema/eu_cookie_compliance.schema.yml
index a35f83c..548b515 100644
--- a/config/schema/eu_cookie_compliance.schema.yml
+++ b/config/schema/eu_cookie_compliance.schema.yml
@@ -151,3 +151,6 @@ eu_cookie_compliance.settings:
     whitelisted_cookies:
       type: string
       label: 'Whitelisted cookies'
+    consent_storage_method:
+      type: string
+      label: 'Consent storage method'
diff --git a/src/Controller/StoreConsent.php b/src/Controller/StoreConsent.php
index 8c01940..8d5ca44 100644
--- a/src/Controller/StoreConsent.php
+++ b/src/Controller/StoreConsent.php
@@ -21,12 +21,12 @@ class StoreConsent extends ControllerBase {
       ->get('eu_cookie_compliance.settings')
       ->get('consent_storage_method');
     // If we're not going to log consent, return NULL.
-    if ($consent_storage_method == 'do_not_store') {
+    if (!$consent_storage_method || $consent_storage_method == 'do_not_store') {
       return new JsonResponse(NULL);
     }
 
     // Get plugin.
-    /* @var \Drupal\eu_cookie_compliance\Plugin\ConsentStorage\BasicConsentStorage $consent_storage */
+    /* @var \Drupal\eu_cookie_compliance\Plugin\ConsentStorageInterface $consent_storage */
     $consent_storage = $consent_storages->createInstance($consent_storage_method);
     // Register consent.
     $result = $consent_storage->registerConsent($target);
diff --git a/src/Form/EuCookieComplianceConfigForm.php b/src/Form/EuCookieComplianceConfigForm.php
index 88ea8ee..6e6e4a9 100644
--- a/src/Form/EuCookieComplianceConfigForm.php
+++ b/src/Form/EuCookieComplianceConfigForm.php
@@ -250,7 +250,7 @@ class EuCookieComplianceConfigForm extends ConfigFormBase {
 
     $form['consent_storage']['consent_storage_method'] = array(
       '#type' => 'radios',
-      '#title' => $this->t('Consent Storage Method'),
+      '#title' => $this->t('Consent storage method'),
       '#default_value' => $config->get('consent_storage_method'),
       '#options' => $consent_storage_options,
     );
diff --git a/src/Plugin/ConsentStorage/BasicConsentStorage.php b/src/Plugin/ConsentStorage/BasicConsentStorage.php
index 7080ed2..ce1368a 100644
--- a/src/Plugin/ConsentStorage/BasicConsentStorage.php
+++ b/src/Plugin/ConsentStorage/BasicConsentStorage.php
@@ -37,7 +37,7 @@ class BasicConsentStorage extends ConsentStorageBase {
         'uid' => $uid,
         'ip_address' => $ip_address,
         'timestamp' => $timestamp,
-        'revision_id' => $revision_id,
+        'revision_id' => $revision_id ? $revision_id : 0 ,
         'consent_type' => $consent_type,
       ]
     )->execute();
diff --git a/src/Plugin/ConsentStorageManager.php b/src/Plugin/ConsentStorageManager.php
index 709bb0b..b6b7f83 100644
--- a/src/Plugin/ConsentStorageManager.php
+++ b/src/Plugin/ConsentStorageManager.php
@@ -5,6 +5,7 @@ namespace Drupal\eu_cookie_compliance\Plugin;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
+use Drupal\Component\Plugin\FallbackPluginManagerInterface;
 
 /**
  * Provides an ConsentStorage plugin manager.
@@ -13,7 +14,7 @@ use Drupal\Core\Plugin\DefaultPluginManager;
  * @see \Drupal\eu_cookie_compliance\Plugin\ConsentStorageInterface
  * @see plugin_api
  */
-class ConsentStorageManager extends DefaultPluginManager {
+class ConsentStorageManager extends DefaultPluginManager implements FallbackPluginManagerInterface {
 
   /**
    * Constructs a ConsentStorageManager object.
@@ -38,4 +39,11 @@ class ConsentStorageManager extends DefaultPluginManager {
     $this->setCacheBackend($cache_backend, 'consent_storage_info_plugins');
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getFallbackPluginId($plugin_id, array $configuration = []) {
+    return 'basic';
+  }
+
 }
